Line no 1: Token <INT> Lexeme int found

At line no: 1 type_specifier : INT

int

Line no 1: Token <ID> Lexeme bar found

Line no 1: Token <LPAREN> Lexeme ( found

Line no 1: Token <INT> Lexeme int found

At line no: 1 type_specifier : INT

int

Line no 1: Token <ID> Lexeme a found

At line no: 1 parameter_list : type_specifier ID 

int a

Line no 1: Token <RPAREN> Lexeme ) found

Line no 2: Token <LCURL> Lexeme { found

Line no 3: Token <RETURN> Lexeme return found

Line no 3: Token <ID> Lexeme a found

Line no 3: Token <SEMICOLON> Lexeme ; found

At line no: 3 variable : ID 

a

At line no: 3 factor : variable 

a

At line no: 3 unary_expression : factor 

a

At line no: 3 term : unary_expression 

a

At line no: 3 simple_expression : term 

a

At line no: 3 rel_expression : simple_expression 

a

At line no: 3 logic_expression : rel_expression 

a

At line no: 3 expression: logic_expression 

a

At line no: 3 statement : RETURN expression SEMICOLON 

return a;

At line no: 3 statements : statement 

return a;

Line no 4: Token <RCURL> Lexeme } found

At line no: 4 compound_statement : LCURL statements RCURL

{
return a;}


At line no: 4 func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 

int bar(int a)
{
return a;}


At line no: 4 unit : func_definition

int bar(int a)
{
return a;}


At line no: 4 program : unit 

int bar(int a)
{
return a;}


Line no 6: Token <INT> Lexeme int found

At line no: 6 type_specifier : INT

int

Line no 6: Token <ID> Lexeme main found

Line no 6: Token <LPAREN> Lexeme ( found

Line no 6: Token <RPAREN> Lexeme ) found

Line no 7: Token <LCURL> Lexeme { found

Line no 8: Token <ID> Lexeme a found

Line no 8: Token <ASSIGNOP> Lexeme = found

At line no: 8 variable : ID 

a

Line no 8: Token <CONST_INT> Lexeme 56 found

At line no: 8 factor : CONST_INT 

56

At line no: 8 unary_expression : factor 

56

At line no: 8 term : unary_expression 

56

Line no 8: Token <SEMICOLON> Lexeme ; found

At line no: 8 simple_expression : term 

56

At line no: 8 rel_expression : simple_expression 

56

At line no: 8 logic_expression : rel_expression 

56

At line no: 8 expression: variable ASSIGNOP logic_expression 

a=56

At line no: 8 expression_statement : SEMICOLON 

a=56;


At line no: 8 statement : expression_statement 

a=56;


At line no: 8 statements : statement 

a=56;


Line no 9: Token <IF> Lexeme if found

Line no 9: Token <LPAREN> Lexeme ( found

Line no 9: Token <ID> Lexeme a found

Line no 9: Token <MULOP> Lexeme % found

At line no: 9 variable : ID 

a

At line no: 9 factor : variable 

a

At line no: 9 unary_expression : factor 

a

At line no: 9 term : unary_expression 

a

Line no 9: Token <CONST_INT> Lexeme 2 found

At line no: 9 factor : CONST_INT 

2

At line no: 9 unary_expression : factor 

2

At line no: 9 term : term MULOP unary_expression 

aa2

Line no 9: Token <RELOP> Lexeme == found

At line no: 9 simple_expression : term 

aa2

Line no 9: Token <CONST_INT> Lexeme 0 found

At line no: 9 factor : CONST_INT 

0

At line no: 9 unary_expression : factor 

0

At line no: 9 term : unary_expression 

0

Line no 9: Token <RPAREN> Lexeme ) found

At line no: 9 simple_expression : term 

0

At line no: 9 rel_expression : simple_expression RELOP simple_expression 

aa220

At line no: 9 logic_expression : rel_expression 

aa220

At line no: 9 expression: logic_expression 

aa220

Line no 10: Token <LCURL> Lexeme { found

Line no 11: Token <ID> Lexeme printf found

Line no 11: Token <LPAREN> Lexeme ( found

Line no 11: Token <ID> Lexeme a found

Line no 11: Token <RPAREN> Lexeme ) found

At line no: 11 variable : ID 

a

At line no: 11 factor : variable 

a

At line no: 11 unary_expression : factor 

a

At line no: 11 term : unary_expression 

a

At line no: 11 simple_expression : term 

a

At line no: 11 rel_expression : simple_expression 

a

At line no: 11 logic_expression : rel_expression 

a

At line no: 11 arguments : logic_expression 

a

At line no: 11 argument_list : arguments

a

At line no: 11 factor : ID LPAREN argument_list RPAREN 

printf(a)

At line no: 11 unary_expression : factor 

printf(a)

At line no: 11 term : unary_expression 

printf(a)

Line no 11: Token <SEMICOLON> Lexeme ; found

At line no: 11 simple_expression : term 

printf(a)

At line no: 11 rel_expression : simple_expression 

printf(a)

At line no: 11 logic_expression : rel_expression 

printf(a)

At line no: 11 expression: logic_expression 

printf(a)

At line no: 11 expression_statement : SEMICOLON 

printf(a);


At line no: 11 statement : expression_statement 

printf(a);


At line no: 11 statements : statement 

printf(a);


Line no 12: Token <RCURL> Lexeme } found

At line no: 12 compound_statement : LCURL statements RCURL

{
printf(a);
}


At line no: 12 statement : expression_statement 

{
printf(a);
}


Line no 13: Token <ELSE> Lexeme else found

Line no 13: Token <IF> Lexeme if found

Line no 13: Token <LPAREN> Lexeme ( found

Line no 13: Token <ID> Lexeme a found

Line no 13: Token <MULOP> Lexeme % found

At line no: 13 variable : ID 

a

At line no: 13 factor : variable 

a

At line no: 13 unary_expression : factor 

a

At line no: 13 term : unary_expression 

a

Line no 13: Token <CONST_INT> Lexeme 2 found

At line no: 13 factor : CONST_INT 

2

At line no: 13 unary_expression : factor 

2

At line no: 13 term : term MULOP unary_expression 

aa2

Line no 13: Token <RELOP> Lexeme == found

At line no: 13 simple_expression : term 

aa2

Line no 13: Token <CONST_INT> Lexeme 1 found

At line no: 13 factor : CONST_INT 

1

At line no: 13 unary_expression : factor 

1

At line no: 13 term : unary_expression 

1

Line no 13: Token <RPAREN> Lexeme ) found

At line no: 13 simple_expression : term 

1

At line no: 13 rel_expression : simple_expression RELOP simple_expression 

aa221

At line no: 13 logic_expression : rel_expression 

aa221

At line no: 13 expression: logic_expression 

aa221

Line no 14: Token <LCURL> Lexeme { found

Line no 15: Token <ID> Lexeme printf found

Line no 15: Token <LPAREN> Lexeme ( found

Line no 15: Token <ID> Lexeme a found

Line no 15: Token <RPAREN> Lexeme ) found

At line no: 15 variable : ID 

a

At line no: 15 factor : variable 

a

At line no: 15 unary_expression : factor 

a

At line no: 15 term : unary_expression 

a

At line no: 15 simple_expression : term 

a

At line no: 15 rel_expression : simple_expression 

a

At line no: 15 logic_expression : rel_expression 

a

At line no: 15 arguments : logic_expression 

a

At line no: 15 argument_list : arguments

a

At line no: 15 factor : ID LPAREN argument_list RPAREN 

printf(a)

At line no: 15 unary_expression : factor 

printf(a)

At line no: 15 term : unary_expression 

printf(a)

Line no 15: Token <SEMICOLON> Lexeme ; found

At line no: 15 simple_expression : term 

printf(a)

At line no: 15 rel_expression : simple_expression 

printf(a)

At line no: 15 logic_expression : rel_expression 

printf(a)

At line no: 15 expression: logic_expression 

printf(a)

At line no: 15 expression_statement : SEMICOLON 

printf(a);


At line no: 15 statement : expression_statement 

printf(a);


At line no: 15 statements : statement 

printf(a);


Line no 16: Token <RCURL> Lexeme } found

At line no: 16 compound_statement : LCURL statements RCURL

{
printf(a);
}


At line no: 16 statement : expression_statement 

{
printf(a);
}


Line no 17: Token <ELSE> Lexeme else found

Line no 18: Token <LCURL> Lexeme { found

Line no 19: Token <ID> Lexeme printf found

Line no 19: Token <LPAREN> Lexeme ( found

Line no 19: Token <ID> Lexeme a found

Line no 19: Token <RPAREN> Lexeme ) found

At line no: 19 variable : ID 

a

At line no: 19 factor : variable 

a

At line no: 19 unary_expression : factor 

a

At line no: 19 term : unary_expression 

a

At line no: 19 simple_expression : term 

a

At line no: 19 rel_expression : simple_expression 

a

At line no: 19 logic_expression : rel_expression 

a

At line no: 19 arguments : logic_expression 

a

At line no: 19 argument_list : arguments

a

At line no: 19 factor : ID LPAREN argument_list RPAREN 

printf(a)

At line no: 19 unary_expression : factor 

printf(a)

At line no: 19 term : unary_expression 

printf(a)

Line no 19: Token <SEMICOLON> Lexeme ; found

At line no: 19 simple_expression : term 

printf(a)

At line no: 19 rel_expression : simple_expression 

printf(a)

At line no: 19 logic_expression : rel_expression 

printf(a)

At line no: 19 expression: logic_expression 

printf(a)

At line no: 19 expression_statement : SEMICOLON 

printf(a);


At line no: 19 statement : expression_statement 

printf(a);


At line no: 19 statements : statement 

printf(a);


Line no 20: Token <RCURL> Lexeme } found

At line no: 20 compound_statement : LCURL statements RCURL

{
printf(a);
}


At line no: 20 statement : expression_statement 

{
printf(a);
}


At line no: 20 statement : IF LPAREN expression RPAREN statement ELSE statement 

if(aa221)
{
printf(a);
}
else
{
printf(a);
}


At line no: 20 statement : IF LPAREN expression RPAREN statement ELSE statement 

if(aa220)
{
printf(a);
}
else
if(aa221){
printf(a);
}
else
{
printf(a);
}


At line no: 20 statements : statements statement 

a=56;
if(aa220){
printf(a);
}
else
if(aa221){
printf(a);
}
else
{
printf(a);
}


Line no 21: Token <RCURL> Lexeme } found

At line no: 21 compound_statement : LCURL statements RCURL

{
a=56;
if(aa220){
printf(a);
}
else
if(aa221){
printf(a);
}
else
{
printf(a);
}
}


At line no: 21 func_definition : type_specifier ID LPAREN RPAREN compound_statement 

int main()
{
a=56;
if(aa220){
printf(a);
}
else
if(aa221){
printf(a);
}
else
{
printf(a);
}
}


At line no: 21 unit : func_definition

int main()
{
a=56;
if(aa220){
printf(a);
}
else
if(aa221){
printf(a);
}
else
{
printf(a);
}
}


At line no: 21 program : program unit

int bar(int a)
{
return a;}

int main()
{
a=56;
if(aa220){
printf(a);
}
else
if(aa221){
printf(a);
}
else
{
printf(a);
}
}


At line no: 21 start : program 

Total lines: 21
